#!/bin/bash

BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
if [ "$?" -gt "0" ]; then
  echo 'No branch was available, exiting pre-commit hook.'
  exit 0
fi

# Include any branches for which you wish to disable this script
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop staging production)
fi
BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")

# Ensure BRANCH_NAME is not empty and is not in a detached HEAD state (i.e. rebase).
# SKIP_PREPARE_COMMIT_MSG may be used as an escape hatch to disable this hook,
# while still allowing other githooks to run.
if [ ! -z "$BRANCH_NAME" ] && ! [[ "$BRANCH_EXCLUDED" -eq 1 ]] && [ "$SKIP_PREPARE_COMMIT_MSG" != 1 ]; then

  PREFIX_PATTERN='[a-zA-Z0-9]{1,10}-[0-9]{1,5}'

  [[ $BRANCH_NAME =~ $PREFIX_PATTERN ]]

  # TODO: Nice-to-have - Add uppercase on the $PREFIX
  # TODO: Nice-to-have - Add an optional match to feature/PJT-1234
  PREFIX=${BASH_REMATCH[0]}

  PREFIX_IN_COMMIT=$(grep -c "\[$PREFIX\]" $1)

  # Ensure PREFIX exists in BRANCH_NAME and is not already present in the commit message
  if [[ -n "$PREFIX" ]] && ! [[ $PREFIX_IN_COMMIT -ge 1 ]]; then
    sed -i.bak -e "1s~^~[$PREFIX] ~" $1
  fi

fi
