- defaults:
    link:
      relink: true

- clean: ['~']
- create:
    - ~/downloads
    - ~/downloads/databases
    - ~/Library/LaunchAgents
    - ~/.git-template-directory
    - ~/.git-template-directory/hooks
    - ~/.git-template-directory/.github
# Shell - Oh My ZSH
# TODO: Figure out the command to not copy the .zshrc
# - shell:
#     - command: oh-my-zsh/tools/install.sh
#       force: true
#       stdout: true
#       stderr: true
#       description: Installing oh-my-zsh
# ~/.hammerspoon:
#   if: '[ `uname` = Darwin ]'
#   path: hammerspoon

# Shell - Custom plugins, themes, aliases, etc.
- shell:
    - 'cd ~/'
    - 'sh -c $(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)'
    - echo 'Shell/ZSH - Installing the default Oh My ZSH...'
- link:
    ~/.envrc:
      force: true
      path: .envrc
    ~/.p10k.zsh:
      force: true
      path: shell/.p10k.zsh
      stdout: true
    ~/.zlogin:
      force: true
      path: shell/.zlogin
      stdout: true
    ~/.theme.zsh:
      force: true
      path: shell/.theme.zsh
    ~/.plugins.zsh:
      force: true
      path: shell/.plugins.zsh
    ~/.functions.zsh:
      force: true
      path: shell/.functions.zsh
    ~/.aliases.zsh:
      force: true
      path: shell/.aliases.zsh
    ~/.iterm2_shell_integration.zsh:
      force: true
      path: shell/.iterm2_shell_integration.zsh
    ~/.zshrc:
      force: true
      path: shell/.zshrc
- shell:
    - echo 'Shell/ZSH - Custom theme, plugins, aliases, etc. installed. Ready to go...'

# Version Control
- link:
    ~/.onboarding_bin: onboarding_bin
    /usr/local/bin/pathChecker.sh: onboarding_bin/pathChecker.sh
    ~/.gitconfig:
      force: true
      path: version-control/.git-template-directory/.gitconfig
    ~/.git-template-directory/.github/CODEOWNERS: version-control/.git-template-directory/.github/CODEOWNERS
    ~/.git-template-directory/hooks/prepare-commit-msg: version-control/.git-template-directory/hooks/prepare-commit-msg
    ~/.git-template-directory/.gitignore: version-control/.git-template-directory/.gitignore
    ~/.bitbucket: version-control/.bitbucket
- shell:
    - echo 'General Version Control - Ready to go...'

# Homebrew General Software and Applications
- shell:
    - 'git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --depth=10000'
- brewfile:
    - Brewfile
- link:
    ~/Brewfile: Brewfile
    ~/Brewfile.lock.json: Brewfile.lock.json
- shell:
    - echo 'General Software and Applications (via homebrew) - Ready to go...'

# Virtualized Environment
- link:
    ~/.dockerignore: virtualized_environments/.dockerignore

# General Software Engineering
- link:
    ~/.editorconfig: engineering/.editorconfig
    ~/.eslintrc.json: engineering/.eslintrc.json
    ~/.eslintignore: engineering/.eslintignore
    # ~/postcss.config.js: engineering/postcss.config.js
    ~/.prettierrc.json: engineering/.prettierrc.json
    ~/.prettierignore: engineering/.prettierignore
    ~/.stylelintrc.json: engineering/.stylelintrc.json
    ~/.htmlhintrc.json: engineering/.htmlhintrc.json
- shell:
    - echo 'General Software Engineering - Ready to go...'

# Node / React
- link:
    ~/.nvmrc: node/.nvmrc
    ~/.npmignore: node/.npmignore
- shell:
    - echo 'Node/React - Ready to go...'

# Ruby on Rails
- link:
    ~/.rubocop.yml: ruby/.rubocop.yml
    ~/.gemrc:
      force: true
      path: ruby/.gemrc
    ~/.mkshrc:
      force: true
      path: ruby/.mkshrc
    ~/.rvmrc:
      force: true
      path: ruby/.rvmrc

- shell:
    - echo 'Ruby on Rails - Ready to go...'

# Python
- link:
    ~/Pipfile: python/Pipfile
    ~/Pipfile.lock: python/Pipfile.lock
    # ~/.pyenv:
    #   path: python/.pyenv
    #   create: true
- shell:
    - echo 'Python - Ready to go...'

# Databases
# TODO: Getting permission error when trying to symlink to LaunchAgents.  Do
# this manually.
# - link:
# '~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist':
# path: /usr/local/opt/postgresql/homebrew.mxcl.postgresql.plist
- shell:
    - launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
    - echo 'PostgresQL and MySQL Databases - Ready to go...'

# IDE - VS Code
- link:
    '~/Library/Application Support/code/User/settings.json':
      path: .vscode/settings.json
      force: true
    '~/Library/Application Support/code/User/keybindings.json':
      path: .vscode/keybindings.json
      force: true
    '~/Library/Application Support/code/User/tasks.json':
      path: .vscode/tasks.json
      force: true
    '~/Library/Application Support/code/User/launch.json':
      path: .vscode/launch.json
      force: true
    '~/Library/Application Support/code/User/snippets':
      path: .vscode/snippets
      create: true
- shell:
    - code --list-extensions > .vscode/extensions.txt
- vscodefile:
    file: .vscode/extensions.txt
    insiders: false
- shell:
    - echo 'VS Code - Ready to go...'

- shell:
    - xcode-select --install || true
    - echo 'Xcode - Ready to go...'
    - echo 'Sourcing your zshrc! You are ready to rock and roll...'
