- defaults:
    link:
      relink: true

- clean: ['~']
- create:
    - ~/downloads
    - ~/downloads/databases
    - ~/Library/LaunchAgents
    - ~/.git-template-directory
    - ~/.git-template-directory/hooks
    - ~/.git-template-directory/.github
    - ~/Documents/AMU
    - ~/Documents/AMU/repos
    - ~/Documents/AMU/repos/amu-development-team
    - ~/Documents/AMU/repos/amu-digital-products
    - ~/Documents/AMU/repos/amu-digital-services
    - ~/Documents/AMU/repos/amu-admins
# Shell - Oh My ZSH, Custom plugins, themes, aliases, etc.
- shell:
    - cd ~/
    - sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    - echo 'Shell/ZSH - Installing the default Oh My ZSH...'
- link:
    ~/.envrc:
      force: true
      path: .envrc
    ~/.zlogin:
      force: true
      path: shell/.zlogin
      stdout: true
    ~/.theme.zsh:
      force: true
      path: shell/.theme.zsh
    ~/.plugins.zsh:
      force: true
      path: shell/.plugins.zsh
    ~/.functions.zsh:
      force: true
      path: shell/.functions.zsh
    ~/.aliases.zsh:
      force: true
      path: shell/.aliases.zsh
    ~/.iterm2_shell_integration.zsh:
      force: true
      path: shell/.iterm2_shell_integration.zsh
    ~/.zshrc:
      force: true
      path: shell/.zshrc

# Version Control
- link:
    ~/.onboarding_bin: onboarding_bin
    /usr/local/bin/pathChecker.sh: onboarding_bin/pathChecker.sh
    ~/.gitconfig:
      force: true
      path: version-control/.git-template-directory/.gitconfig
    ~/.git-template-directory/.github/CODEOWNERS: version-control/.git-template-directory/.github/CODEOWNERS
    ~/.git-template-directory/hooks/prepare-commit-msg: version-control/.git-template-directory/hooks/prepare-commit-msg
    ~/.git-template-directory/.gitignore: version-control/.git-template-directory/.gitignore
    ~/.bitbucket: version-control/.bitbucket
# - shell:
# Homebrew General Software and Applications
# - shell: if [ ! -x /usr/local/bin/brew ]; then
#     echo "Installing x86 Homebrew..."
#     arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#     fi
# - echo 'General Version Control - Ready to go...'
# - 'git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow'
- brewfile:
    - Brewfile
- link:
    ~/Brewfile: Brewfile
    ~/Brewfile.lock.json: Brewfile.lock.json
- shell:
    - echo 'General Software and Applications (via homebrew) - Ready to go...'

# Virtualized Environment
- link:
    ~/.dockerignore: virtualized_environments/.dockerignore

# General Software Engineering
- link:
    ~/.editorconfig: engineering/formatters/.editorconfig

    # General CSS and Style Linters
    ~/.stylelintrc.json: engineering/css/.stylelintrc.json
    ~/.stylelintrcignore: engineering/css/.stylelintrcignore
    # ~/postcss.config.js: engineering/postcss.config.js

    # General Formatters
    ~/.prettierrc.json: engineering/formatters/.prettierrc.json
    ~/.prettierignore: engineering/formatters/.prettierignore
    ~/.htmlhintrc.json: engineering/formatters/.htmlhintrc.json
- shell:
    - echo 'General Software Engineering - Ready to go...'

# Javascript and React
- link:
    # Node Versions
    ~/.nvmrc: engineering/javascript/.nvmrc
    ~/.npmignore: engineering/javascript/.npmignore
    # General Javascript Linters
    ~/.eslintrc.json: engineering/javascript/legacy/.eslintrc.json
    ~/.eslintignore: engineering/javascript/legacy/.eslintignore
- shell:
    - echo 'Node/React - Ready to go...'

# Ruby on Rails
- link:
    ~/.rubocop.yml: engineering/ruby/.rubocop.yml
    ~/.gemrc: engineering/ruby/.gemrc
    ~/.mkshrc: engineering/ruby/.mkshrc
    ~/.rvmrc: engineering/ruby/.rvmrc
    ~/.ruby-version: engineering/ruby/.ruby-version
    ~/.ruby-gemset: engineering/ruby/.ruby-gemset
    ~/.solargraph.yml: engineering/ruby/.solargraph.yml

- shell:
    - echo 'Ruby on Rails - Ready to go...'

# Python
- link:
    ~/Pipfile: engineering/python/Pipfile
    ~/Pipfile.lock: engineering/python/Pipfile.lock
    # ~/.pyenv:
    #   path: python/.pyenv
    #   create: true
- shell:
    - echo 'Python - Ready to go...'

# Databases
# TODO: Getting permission error when trying to symlink to LaunchAgents.  Do
# this manually.
# - link:
# '~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist':
# path: /usr/local/opt/postgresql/homebrew.mxcl.postgresql.plist
- shell:
    - launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
    - echo 'PostgresQL and MySQL Databases - Ready to go...'

# IDE - VS Code
- link:
    '~/Library/Application Support/code/User/settings.json':
      path: .vscode/settings.json
      force: true
    '~/Library/Application Support/code/User/keybindings.json':
      path: .vscode/keybindings.json
      force: true
    '~/Library/Application Support/code/User/tasks.json':
      path: .vscode/tasks.json
      force: true
    '~/Library/Application Support/code/User/launch.json':
      path: .vscode/launch.json
      force: true
- shell:
    - code --list-extensions > .vscode/extensions.txt
- vscodefile:
    file: .vscode/extensions.txt
    insiders: false
- shell:
    - echo 'VS Code - Ready to go...'
    - xcode-select --install || true
    - echo 'Xcode - Ready to go...'
    - source ~/.zshrc
    - echo 'Shell/ZSH - Custom theme, plugins, aliases, etc. installed. Ready to go...'
    - echo 'Sourcing your zshrc! You are ready to rock and roll...'
